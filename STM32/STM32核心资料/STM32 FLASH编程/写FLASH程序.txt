int flash_write(u32 StartAddr,u32 *p_data,u32 size)
{
	volatile FLASH_Status FLASHStatus;
	u32 EndAddr=StartAddr+size*4;
	vu32 NbrOfPage = 0;
	u32 EraseCounter = 0x0, Address = 0x0;
	int i;
	int MemoryProgramStatus=1;	//为一是通过
	
	FLASH_Unlock();
	NbrOfPage=((EndAddr-StartAddr)>>10)+1;	//有多少个页被擦除
	//清除所有已有标志
	FLASH_ClearFlag(FLASH_FLAG_BSY | FLASH_FLAG_EOP | FLASH_FLAG_PGERR | FLASH_FLAG_WRPRTERR);
	//擦页
	FLASHStatus=FLASH_COMPLETE;
	for(EraseCounter=0;(EraseCounter<NbrOfPage)&&(FLASHStatus==FLASH_COMPLETE);EraseCounter++)
	{
		FLASHStatus=FLASH_ErasePage(StartAddr+(PageSize*EraseCounter));
	}
	//开始写数据
	Address = StartAddr;
	i=0;
	while((Address<EndAddr)&&(FLASHStatus==FLASH_COMPLETE))
	{
		FLASHStatus=FLASH_ProgramWord(Address,p_data[i++]);
		Address=Address+4;
	}
	//检验数据是否出错
	Address = StartAddr;
	i=0;
	while((Address < EndAddr) && (MemoryProgramStatus != 0))
	{
		if((*(vu32*) Address) != p_data[i++])
		{
			MemoryProgramStatus = 0;
			return 1;
		}
		Address += 4;
	}
	return 0;
} 